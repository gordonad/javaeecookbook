/**
 * Configuration for the root JavaEE Cookbook project
 *
 * @author Mick Knutson
 * <p><a href="http://www.baselogic.com">Blog: http://baselogic.com</a></p>
 * <p><a href="http://linkedin.com/in/mickknutson">LinkedIN: http://linkedin.com/in/mickknutson</a></p>
 * <p><a href="http://twitter.com/mickknutson">Twitter: http://twitter.com/mickknutson</a></p>
 * <p><a href="http://github.com/mickknutson">Git hub: http://github.com/mickknutson</a></p>
 * 
 * @see http://www.packtpub.com/java-ee6-securing-tuning-extending-enterprise-applications-cookbook/book
 * @see http://www.amazon.com/Cookbook-securing-extending-enterprise-applications/dp/1849683166
 * @see http://baselogic.com
 * @see http://linkedin.com/in/mickknutson
 * @see http://twitter.com/mickknutson
 * @see http://github.com/mickknutson
 * 
 * @since 2011
 * 
 */
buildscript {

    // ------------------------------------------------------------------------
    // Properties Array
    // ------------------------------------------------------------------------
    versions = [
            root: "1.0.0", // Root JavaEE Cookbook Chapter_Code version
            // Must integrate these with the OLD properties
            activemq: "5.5.0",
            ant: "1.8.2",
            commons_lang3: "3.0.1",
            commons_logging: "1.1.1",
            cxf: "2.4.2",
            dozer: "5.3.2",

            //jetty: "8.0.1.v20110908",
            jetty: "7.4.2.v20110526",
            mongo: "2.6.5",
            xbean: "3.8",
            xerces: "2.9.1",

            // OLD Properties -------------------------------------------------
            android: '2.3.3',
            aspectj: '1.6.11',
            aspectjlib: '1.6.2',
            commons_cli: '1.2',
            commons_lang: '2.5',
            camel: '2.8.0',
            dbunit: '2.4.8',
            derby: '10.7.1.1',
            eclipselink: '2.3.2',
            //groovy: '1.8.6',
            groovy: '2.0.0-beta-2',

            // Was working with 3.2 SNAPSHOT's, but the 3.1.1 is a final release.
            //glassfish_embedded_plugin: '3.2-SNAPSHOT',
            //glassfish: '3.2-b06',
            glassfish_embedded_plugin: '3.1.1',
            glassfish: '3.1.1',

            h2: '1.3.148',
            hamcrest: '1.1',
            htmlunit: '2.9',
            httpclient: "4.1.2",
            javax_persistence: '2.0.3', // fixme cannot find 2.0.3
            jaxb: '2.1.10',
            jackson: "1.8.5",
            jersey: '1.10-b04',
            joda: "2.0",

            //OLD: jsf: '1.2_02',
            jsf: '2.1',
            jsf_impl: '2.1',

            //jsp: '2.2.1-b03',
            jsp: '2.2.1',
            jsr250: '1.0',
            jsr311: "1.1.1",
            junit: '4.10',
            jython: '2.5.0',
            log4j: '1.2.16',

            mockito: '1.8.5',
            powermock: '1.4.11',

            scala: '2.9.1',

            selenium_client: '1.0.2', //deprecated
            selenium_server: '2.3.1',
            selenium: '2.3.1',
            servlet_api: '3.0.1',
            slf4j: '1.6.4',
            xmlunit: '1.3',
            yuicompressor: '2.4.6',
    ]

    //-----------------------------------------------------------------------//
    // Global Dependency sets
    //-----------------------------------------------------------------------//
    common_dependencies = [
            "commons-lang:commons-lang:${versions.commons_lang}",
            "commons-cli:commons-cli:${versions.commons_cli}",
            //"org.apache.commons:commons-lang3:${versions.commons_lang3}",
            //"commons-pool:commons-pool:${versions.commons_pool}",
            "joda-time:joda-time:${versions.joda}",
            "org.apache.ant:ant:${versions.ant}"
    ]

    common_extended_dependencies = [
            "org.apache.httpcomponents:httpcore:${versions.httpclient}",
            "org.apache.httpcomponents:httpclient:${versions.httpclient}",
            "net.sf.dozer:dozer:${versions.dozer}",
            "xerces:xercesImpl:${versions.xerces}",
            //"org.log4mongo:log4mongo-java:0.8.0",
            "org.mongodb:mongo-java-driver:${versions.mongo}",
    ]

    /**
     * http://www.breskeby.com/2010/02/using-gradle-with-aspectj/
     */
    aspect_dependencies = [
            "org.aspectj:aspectjlib:${versions.aspectjlib}",
            "org.aspectj:aspectjweaver:${versions.aspectj}"
    ]

    javaee_provided_dependencies = [
            "javax:javaee-api:6.0",
            "javax:javaee-web-api:6.0",
            "org.apache.geronimo.specs:geronimo-servlet_3.0_spec:1.0",
            "javax.servlet.jsp:javax.servlet.jsp-api:${versions.jsp}",
            "com.sun.el:el-ri:1.0",
            "org.glassfish.web:javax.el:2.2.2",
            //"javax.servlet:javax.servlet-api:${versions.servlet_api}",
    ]

    javaee_dependencies = [
            "javax.annotation:jsr250-api:${versions.jsr250}",
            //"javax.faces:jsf-api:$jsf_version",
            "javax.faces:javax.faces-api:${versions.jsf_impl}",
            "org.glassfish:javax.faces:2.1.3",
            "org.python:jython:${versions.jython}"
    ]

    testing_dependencies = [
            "junit:junit:${versions.junit}",
            "org.hamcrest:hamcrest-all:${versions.hamcrest}",
            "org.mockito:mockito-all:${versions.mockito}",
            "org.powermock:powermock-core:${versions.powermock}",
            "org.powermock:powermock-module-junit4:${versions.powermock}",
            "org.powermock:powermock-api-mockito:${versions.powermock}",
            "org.powermock:powermock-api-support:${versions.powermock}",
            "org.powermock:powermock-classloading-base:${versions.powermock}",
            "org.powermock:powermock-module-junit4-common:${versions.powermock}",
            "org.powermock:powermock-reflect:${versions.powermock}",
            "org.powermock:powermock-module-junit4-legacy:${versions.powermock}",
            "org.javassist:javassist:3.15.0-GA"
    ]

    testing_web_dependencies = [
            // http://gradle.1045684.n5.nabble.com/Running-Selenium-Server-before-tests-td3303802.html
            "net.sourceforge.htmlunit:htmlunit:${versions.htmlunit}",

            "org.seleniumhq.selenium:selenium-server:${versions.selenium_server}",
            "org.seleniumhq.selenium:selenium-api:${versions.selenium_server}",
            "org.seleniumhq.selenium:selenium-support:${versions.selenium_server}",
            "org.seleniumhq.selenium:selenium-java:${versions.selenium}",
            "org.seleniumhq.selenium:selenium-remote-driver:${versions.selenium}",
            "org.seleniumhq.selenium:selenium-htmlunit-driver:${versions.selenium}",
            "org.seleniumhq.selenium:selenium-firefox-driver:${versions.selenium}",
            "org.seleniumhq.selenium:selenium-chrome-driver:${versions.selenium}",

            "org.seleniumhq.selenium.client-drivers:selenium-java-client-driver:${versions.selenium_client}",
            "org.glassfish.extras:glassfish-embedded-all:${versions.glassfish}",
    ]

    logger.warn "--- buildscript ---"
    logger.warn " name: $name"
    logger.warn "-------------------------------------------------------------"

    apply plugin: 'idea'

    /*idea.module.iml {
        whenMerged { module ->
            module.dependencies*.exported = true
        }
    }*/

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'commons-codec', name: 'commons-codec', version: '1.2'

        // FIXME: Need to find out how to get global ${project.versions.yuicompressor}
        //classpath "com.yahoo.platform.yui:yuicompressor:${project.versions.yuicompressor}"
        classpath group: 'com.yahoo.platform.yui', name: 'yuicompressor', version: '2.4.6'
        classpath group: 'org.mozilla', name: 'rhino', version: '1.7R3'
        classpath files('../libs/yguard.jar')
        classpath fileTree(dir: 'libs', include: '*.jar')
    }

    ant.taskdef(name: 'yguard', classname: 'com.yworks.yguard.YGuardTask', classpath: 'libs/yguard.jar')
}

allprojects {
    logger.warn "--- allprojects ---"
    configurations*.dependencies.each { println it }
    logger.warn "-------------------------------------------------------------"

    configurations {
        obfuscate
    }

    dependencies {
        obfuscate "org.eclipse.persistence:javax.persistence:${versions.javax_persistence}",
                "org.eclipse.persistence:eclipselink:${versions.eclipselink}",
                "com.h2database:h2:${versions.h2}",
                "org.apache.derby:derbyclient:${versions.derby}",
                "org.apache.derby:derby:${versions.derby}"
    }

}

// -----------------------------------------------------------------------------
// Subprojects
// -----------------------------------------------------------------------------
subprojects {

    apply plugin: 'java'
    apply plugin: 'maven'  // Maven plugin to install artifact in local Maven repo.

    logger.warn "--- subprojects ---"
    configurations*.dependencies.each { println it }
    logger.warn "-------------------------------------------------------------"

   /* task printDeps( dependsOn: build ) << {
        println "--------------------------------------"
        configurations*.dependencies.each { println it }
        println "--------------------------------------"
    }
    logger.warn "-------------------------------------------------------------"*/

    configurations {
        all*.exclude group: "commons-logging", module: "commons-logging"

        compile.transitive = true  // Make sure transitive project dependencies are resolved.

        proguard
        provided_dependencies
    }

    repositories {
        flatDir(dirs: 'libs')
        mavenLocal()
        mavenCentral()

        maven {url 'https://maven.java.net/content/groups/public/'}
        maven {url 'http://www.eclipse.org/downloads/download.php?r=1&nf=1&file=/rt/eclipselink/maven.repo'}


        //maven {url 'http://nexus.openqa.org/content/repositories/releases/'}
        //maven {url 'http://scala-tools.org/repo-releases'}
        maven {url 'http://repository.jboss.org/nexus/content/groups/public-jboss/'}
    }

    dependencies {

        compile "commons-lang:commons-lang:${versions.commons_lang}",
                "commons-cli:commons-cli:${versions.commons_cli}",
                "joda-time:joda-time:${versions.joda}",
                "org.apache.ant:ant:${versions.ant}"

        compile "org.slf4j:jcl-over-slf4j:${versions.slf4j}",
                "org.slf4j:jul-to-slf4j:${versions.slf4j}",
                "org.slf4j:slf4j-log4j12:${versions.slf4j}"

        compile("log4j:log4j:${versions.log4j}") {
            exclude group: "com.sun.jdmk", module: "jmxtools"
            exclude group: "com.sun.jmx", module: "jmxri"
            exclude group: "javax.mail", module: "mail"
            exclude group: "javax.jms", module: "jms"
        }

        testCompile "junit:junit:${versions.junit}",
                    "org.hamcrest:hamcrest-all:${versions.hamcrest}",
                    "org.mockito:mockito-all:${versions.mockito}",
                    "org.powermock:powermock-core:${versions.powermock}",
                    "org.powermock:powermock-module-junit4:${versions.powermock}",
                    "org.powermock:powermock-api-mockito:${versions.powermock}",
                    "org.powermock:powermock-api-support:${versions.powermock}",
                    "org.powermock:powermock-classloading-base:${versions.powermock}",
                    "org.powermock:powermock-module-junit4-common:${versions.powermock}",
                    "org.powermock:powermock-reflect:${versions.powermock}",
                    "org.powermock:powermock-module-junit4-legacy:${versions.powermock}",
                    "org.javassist:javassist:3.15.0-GA"

        testCompile group: 'com.yahoo.platform.yui', name: 'yuicompressor', version: '2.4.6'
        testCompile group: 'org.mozilla', name: 'rhino', version: '1.7R3'
        testCompile files('libs/yguard.jar')
        testCompile fileTree(dir: 'libs', include: '*.jar')

        testCompile 'net.sf.proguard:proguard:4.4'
        proguard 'net.sf.proguard:proguard:4.4'
    }

    // group will translate to groupId during pom generation and deployment
    group = 'com.baselogic.javaeecookbook'
    version = '1.0.2'
    sourceCompatibility = '1.6'

    buildDir = 'target'


}

// -----------------------------------------------------------------------------
// Custom Tasks
// -----------------------------------------------------------------------------

import com.yahoo.platform.yui.compressor.*
import org.mozilla.javascript.*

class SystemOutErrorReporter implements ErrorReporter {

    private String format(String arg0, String arg1, int arg2, String arg3, int arg4) {
        return String.format("%s%s at line %d, column %d:\n%s",
            arg0,
            arg1 == null ? "" : ":" + arg1,
            arg2,
            arg4,
            arg3);
    }

    @Override
    public void warning(String arg0, String arg1, int arg2, String arg3, int arg4) {
        System.out.println("WARNING: " + format(arg0, arg1, arg2, arg3, arg4));
    }

    @Override
    public void error(String arg0, String arg1, int arg2, String arg3, int arg4) {
        System.out.println("ERROR: " + format(arg0, arg1, arg2, arg3, arg4));
    }

    @Override
    public EvaluatorException runtimeError(String arg0, String arg1, int arg2, String arg3, int arg4) {
        System.out.println("RUNTIME ERROR: " + format(arg0, arg1, arg2, arg3, arg4));
        return new EvaluatorException(arg0);
    }
}


class CatPack extends DefaultTask {
    @InputDirectory
    File inputFolder;
    @OutputFile
    File outputFile;
    @TaskAction
    public void doCatPack() {
        def fw = new FileWriter(outputFile)
        inputFolder.eachFileMatch(~/.*\.js/) { File file ->
            def c = new JavaScriptCompressor(file.newReader(), new SystemOutErrorReporter())
            // 0 = line breaks after each rule, -1 = no line breaks
            c.compress(fw, -1, false, false, false, false)
        }
        fw.flush()
        fw.close()
    }
}

class CssPack extends DefaultTask {
    @InputDirectory
    File inputFolder;
    @OutputFile
    File outputFile;
    @TaskAction
    public void doCssPack() {
        def fw = new FileWriter(outputFile)
        inputFolder.eachFileMatch(~/.*\.css/) { File file ->
            def c = new CssCompressor(file.newReader())
            // 0 = line breaks after each rule, -1 = no line breaks
            c.compress(fw, -1)
        }
        fw.flush()
        fw.close()
    }
}

class Yguard extends DefaultTask {
    def File taskJar
    def String originalJar
    def String targetJar
    def String externalClasses

    @TaskAction
    def yguard() {

        def String renameLog = "${targetJar}.renamelog.gz"
        def String shrinkLog = "${targetJar}.shrinklog.gz"
        def String externalClasses = "${externalClasses}"

        println "-------------------------------------------------------------"
        println "originalJar: $originalJar"
        println "targetJar: $targetJar"
        println "renameLog: ${renameLog}"
        println "shrinkLog: ${shrinkLog}"
        println "yguard taskJar.exists(): ${taskJar.exists()}"
        println "-------------------------------------------------------------"
        println "externalClasses: ${externalClasses}"
        println "-------------------------------------------------------------"

        ant.taskdef(name: 'yguard', classname: 'com.yworks.yguard.YGuardTask', classpath: taskJar)

        ant.yguard {
            inoutpair (in: originalJar, out: targetJar)

            externalclasses {
                pathelement(path: externalClasses)
            }

            shrink (logfile: "${shrinkLog}", createStubs: "true"){
                keep {
                    'class'(classes: "protected",
                    methods: "protected",
                    fields: "protected"
                    ){
                        patternset{
                            include(name: "com.baselogic.javaee6.*")
                            exclude(name: "com.baselogic.javaee6.domain.*")
                        }
                    }
                }
            }

            rename (logfile: renameLog) {
                property(name: "error-checking", value: "pedantic")
            }
        }
    }
} // Yguard


/**
 * Chapter 01: POJO\'s and Utilities
 */
project('ch01') {
    description = 'Chapter 01: POJO\'s and Utilities'
    dependencies {}

    task obfuscate(type: Yguard) {
        taskJar = file("../libs/yguard.jar")
        originalJar = "${buildDir}/libs/ch01-${version}.jar"
        targetJar = "${buildDir}/libs/ch01-${version}-obf.jar"
        externalClasses = "${configurations.compile.asPath}"
    }

    jar {
        manifest {
            attributes 'Implementation-Title': description,
                        'Implementation-Version': version,
                        'Group': group,
                        'version': version,
                        'sourceCompatibility': sourceCompatibility

        }

    }

    jar.doLast{
    	println "obfuscate ch01 jar"
    	obfuscate.execute()
    }
}


/**
 * Chapter 02: POJO\'s and Utilities
 */
project('ch02') {
    description = 'Chapter 02: Eclipse Link JPA'

    dependencies {
        compile "org.eclipse.persistence:javax.persistence:${versions.javax_persistence}",
                "org.eclipse.persistence:eclipselink:${versions.eclipselink}",
                "com.h2database:h2:${versions.h2}",
                "org.apache.derby:derbyclient:${versions.derby}",
                "org.apache.derby:derby:${versions.derby}"

        compile javaee_provided_dependencies

        testCompile "org.dbunit:dbunit:${versions.dbunit}"
    }


    task obfuscate(type: Yguard) {
        taskJar = file("../libs/yguard.jar")
        originalJar = "${buildDir}/libs/ch02-${version}.jar"
        targetJar = "${buildDir}/libs/ch02-${version}-obf.jar"
        externalClasses = "${configurations.compile.asPath}"
    }

    jar {
        manifest {
            attributes 'Implementation-Title': description,
                        'Implementation-Version': version,
                        'Group': group,
                        'version': version,
                        'sourceCompatibility': sourceCompatibility

        }

    }

    jar.doLast{
    	println "obfuscate ch02 jar"
    	obfuscate.execute()
    }
}


/**
 * Chapter 03: Security
 */
project('ch03') {
    description = 'Chapter 03: Security'

    apply plugin: 'war'
    apply plugin: 'jetty'

    dependencies {
        compile project(':ch01')
        compile project(':ch02')
        compile javaee_dependencies

        provided_dependencies javaee_provided_dependencies

    }

    test {
        dependencies {
            compile testing_dependencies
            testCompile testing_web_dependencies
        }
    }

    task jsMini(type: CatPack) {
        inputFolder = file("src/main/webapp/resources/js")
        outputFile = file("$buildDir/jsmin/modules.min.js")
    }

    task cssMini(type: CssPack) {
        inputFolder = file("src/main/webapp/resources/styles")
        outputFile = file("$buildDir/styles/modules.min.css")
    }

    war {
        exclude '**/*js*/*'
        exclude '**/*styles*/*'
        from (jsMini) {
            into("resources/js")
        }
        from (cssMini) {
            into("resources/styles")
        }
    }

}


/**
 * Chapter 05: Extending
 */
project('ch05') {
    description = 'Chapter 05: Extending'

    apply plugin: 'groovy'
    apply plugin: 'scala'

    dependencies {
        compile javaee_provided_dependencies
        compile javaee_dependencies

        groovy "org.codehaus.groovy:groovy:${versions.groovy}"

        scalaTools "org.scala-lang:scala-compiler:${versions.scala}"
        scalaTools "org.scala-lang:scala-library:${versions.scala}"

        // Libraries needed for scala api
        compile "org.scala-lang:scala-library:${versions.scala}"
    }
}
